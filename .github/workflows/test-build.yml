name: Test & Build
on: [push, pull_request]

jobs:
  test:
    name: ${{ matrix.module }} Tests (Py ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        module: [Api, Core]

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. This prevents duplicated runs on internal PRs.
    # Some discussion of this here:
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Apt Packages
        run: |
          sudo apt-get update
          sudo apt-get install --yes libxmlsec1-dev libxml2-dev

      - name: Install Poetry
        uses: ./.github/actions/poetry

      - name: Install Tox
        run: |
          pip install --upgrade pip
          pip install tox tox-gh-actions tox-docker

      - name: Run Tests
        run: tox
        env:
          MODULE: ${{ matrix.module }}

  docker-build-base:
    name: Build base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ["linux/amd64", "linux/arm64"]

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. This prevents duplicated runs on internal PRs.
    # Some discussion of this here:
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create version file
        run: git rev-parse --short HEAD > .version

      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: base
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.platform }}-${{ github.run_id }}
          platforms: ${{ matrix.platform }}

  docker-test-images:
    name: Test circ-${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: [docker-build-base]
    strategy:
      fail-fast: false
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
        image: ["scripts", "webapp"]
    env:
      POSTGRES_USER: palace_user
      POSTGRES_PASSWORD: test
      POSTGRES_DB: palace_circulation

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create version file
        run: git rev-parse --short HEAD > .version

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          tags: circ
          load: true
          target: ${{ matrix.image }}
          cache-from: type=gha,scope=buildkit-${{ matrix.platform }}-${{ github.run_id }}
          platforms: ${{ matrix.platform }}

      - name: Start container
        run: >
          docker run --rm --name circ -d --platform ${{ matrix.platform }}
          --network ${{job.services.postgres.network}}
          -e SIMPLIFIED_PRODUCTION_DATABASE="postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@postgres:5432/${{ env.POSTGRES_DB }}"
          circ

      - name: Run tests
        run: ./docker/ci/test_${{ matrix.image }}.sh circ

      - name: Stop container
        if: always()
        run: docker stop circ

  docker-push-images:
    name: Push circ-${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: [test, docker-test-images]
    strategy:
      fail-fast: false
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
        image: ["scripts", "webapp", "exec"]

    # Push the built docker image only in the following cases:
    #  - The `NO_DOCKER_IMAGE` secret is not set. (Useful if you want to disable pushing
    #    of docker images in local forks of this repo).
    if: secrets.NO_DOCKER_IMAGE == null

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version file
        run: git rev-parse --short HEAD > .version

      - name: Generate tags for image
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository_owner }}/circ-${{ matrix.image }}
          tags: |
            type=semver,pattern={{major}}.{{minor}},priority=10
            type=semver,pattern={{version}},priority=20
            type=ref,event=branch,priority=30
            type=sha,priority=40

      - name: Push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.image }}
          cache-from: type=gha,scope=buildkit-${{ matrix.platform }}-${{ github.run_id }}
          platforms: ${{ matrix.platform }}
