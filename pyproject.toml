[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    '@(typing\.)?overload$',
    '^\s*\.\.\.\s*$',
    '^\s*pass\s*$',
    '^\s*raise NotImplementedError\s*$',
    'class .*\bProtocol\):',
]
include_namespace_packages = true

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
# For some reason coverage wants to include this file, even though
# it doesn't exist. I believe this a bug in either dependency-injector
# or coverage, but it's not impacting us negatively, so we can just
# tell coverage to ignore it, so we don't get a warning about it.
omit = ["src/dependency_injector/providers.pxd", "src/dependency_injector/providers.pyx"]
parallel = true
relative_files = true
source = ["src"]

[tool.isort]
combine_as_imports = true
known_first_party = ["palace"]
known_third_party = ["alembic"]
profile = "black"

[tool.mypy]
# This is the main mypy configuration for the project.
# All new code should aim to pass mypy with strict settings.
disallow_untyped_calls = false
explicit_package_bases = true
files = ["alembic", "src/palace", "tests"]
mypy_path = ["alembic", "src"]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
strict = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
# Overrides for the tests module.
check_untyped_defs = false
# In our tests, we often overwrite methods on classes to mock out behavior.
# This is a common pattern in Python, but mypy doesn't like it. This override
# silences those errors, but only for the tests module.
# See discussion here:
# https://github.com/python/mypy/issues/2427
disable_error_code = "method-assign, union-attr, annotation-unchecked"
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
extra_checks = false
module = "tests.*"
no_implicit_reexport = false
strict_equality = false
warn_return_any = false
# Mypy seems to have issues in the test code where it thinks code is unreachable
# when it is not. So we disable this warning for the tests module.
warn_unreachable = false

[[tool.mypy.overrides]]
# These overrides use lax checking for any modules that we have not
# yet added type hints to. We are aiming to gradually add type hints
# to all of these modules, at which point we will remove this override.
check_untyped_defs = false
disable_error_code = "annotation-unchecked"
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
extra_checks = false
module = [
    "palace.manager.api.admin.admin_authentication_provider",
    "palace.manager.api.admin.controller.admin_search",
    "palace.manager.api.admin.controller.announcement_service",
    "palace.manager.api.admin.controller.base",
    "palace.manager.api.admin.controller.custom_lists",
    "palace.manager.api.admin.controller.dashboard",
    "palace.manager.api.admin.controller.feed",
    "palace.manager.api.admin.controller.individual_admin_settings",
    "palace.manager.api.admin.controller.lanes",
    "palace.manager.api.admin.controller.quicksight",
    "palace.manager.api.admin.controller.sign_in",
    "palace.manager.api.admin.controller.timestamps",
    "palace.manager.api.admin.controller.view",
    "palace.manager.api.admin.controller.work_editor",
    "palace.manager.api.admin.model.custom_lists",
    "palace.manager.api.admin.password_admin_authentication_provider",
    "palace.manager.api.admin.routes",
    "palace.manager.api.admin.validator",
    "palace.manager.api.annotations",
    "palace.manager.api.app",
    "palace.manager.api.authentication.access_token",
    "palace.manager.api.authentication.base",
    "palace.manager.api.authentication.basic",
    "palace.manager.api.authentication.basic_token",
    "palace.manager.api.authenticator",
    "palace.manager.api.circulation_manager",
    "palace.manager.api.config",
    "palace.manager.api.controller.annotation",
    "palace.manager.api.controller.base",
    "palace.manager.api.controller.device_tokens",
    "palace.manager.api.controller.index",
    "palace.manager.api.controller.opds_feed",
    "palace.manager.api.controller.patron_auth_token",
    "palace.manager.api.controller.playtime_entries",
    "palace.manager.api.controller.profile",
    "palace.manager.api.controller.urn_lookup",
    "palace.manager.api.controller.work",
    "palace.manager.api.lanes",
    "palace.manager.api.local_analytics_exporter",
    "palace.manager.api.model.time_tracking",
    "palace.manager.api.routes",
    "palace.manager.api.util.patron",
    "palace.manager.api.util.profilers",
    "palace.manager.api.util.xray",
    "palace.manager.api.web_publication_manifest",
    "palace.manager.core.app_server",
    "palace.manager.core.classifier",
    "palace.manager.core.classifier.age",
    "palace.manager.core.classifier.bic",
    "palace.manager.core.classifier.bisac",
    "palace.manager.core.classifier.ddc",
    "palace.manager.core.classifier.gutenberg",
    "palace.manager.core.classifier.keyword",
    "palace.manager.core.classifier.lcc",
    "palace.manager.core.classifier.overdrive",
    "palace.manager.core.classifier.simplified",
    "palace.manager.core.classifier.work",
    "palace.manager.core.config",
    "palace.manager.core.coverage",
    "palace.manager.core.entrypoint",
    "palace.manager.core.equivalents_coverage",
    "palace.manager.core.external_list",
    "palace.manager.core.facets",
    "palace.manager.core.lcp.credential",
    "palace.manager.core.monitor",
    "palace.manager.core.opensearch",
    "palace.manager.core.user_profile",
    "palace.manager.customlists.exporter",
    "palace.manager.customlists.report",
    "palace.manager.integration.patron_auth.kansas_patron",
    "palace.manager.integration.patron_auth.millenium_patron",
    "palace.manager.integration.patron_auth.saml.auth",
    "palace.manager.integration.patron_auth.saml.configuration.model",
    "palace.manager.integration.patron_auth.saml.controller",
    "palace.manager.integration.patron_auth.saml.credential",
    "palace.manager.integration.patron_auth.saml.metadata.federations.loader",
    "palace.manager.integration.patron_auth.saml.metadata.federations.validator",
    "palace.manager.integration.patron_auth.saml.metadata.filter",
    "palace.manager.integration.patron_auth.saml.metadata.model",
    "palace.manager.integration.patron_auth.saml.metadata.monitor",
    "palace.manager.integration.patron_auth.saml.metadata.parser",
    "palace.manager.integration.patron_auth.saml.provider",
    "palace.manager.integration.patron_auth.saml.python_expression_dsl.ast",
    "palace.manager.integration.patron_auth.saml.python_expression_dsl.evaluator",
    "palace.manager.integration.patron_auth.sip2.client",
    "palace.manager.integration.patron_auth.sip2.provider",
    "palace.manager.integration.patron_auth.sirsidynix_authentication_provider",
    "palace.manager.scripts.adobe",
    "palace.manager.scripts.availability",
    "palace.manager.scripts.base",
    "palace.manager.scripts.configuration",
    "palace.manager.scripts.contributor_names",
    "palace.manager.scripts.coverage_provider",
    "palace.manager.scripts.customlist",
    "palace.manager.scripts.identifier",
    "palace.manager.scripts.informational",
    "palace.manager.scripts.input",
    "palace.manager.scripts.integration_test",
    "palace.manager.scripts.lane",
    "palace.manager.scripts.local_analytics",
    "palace.manager.scripts.metadata",
    "palace.manager.scripts.monitor",
    "palace.manager.scripts.novelist",
    "palace.manager.scripts.nyt",
    "palace.manager.scripts.playtime_entries",
    "palace.manager.scripts.saml",
    "palace.manager.scripts.self_test",
    "palace.manager.scripts.short_token",
    "palace.manager.scripts.suppress",
    "palace.manager.scripts.timestamp",
    "palace.manager.scripts.translations",
    "palace.manager.scripts.work",
    "palace.manager.search.external_search",
    "palace.manager.sqlalchemy.bulk_operation",
    "palace.manager.sqlalchemy.flask_sqlalchemy_session",
    "palace.manager.sqlalchemy.listeners",
    "palace.manager.sqlalchemy.model.admin",
    "palace.manager.sqlalchemy.model.contributor",
    "palace.manager.sqlalchemy.model.coverage",
    "palace.manager.sqlalchemy.model.credential",
    "palace.manager.sqlalchemy.model.customlist",
    "palace.manager.sqlalchemy.model.edition",
    "palace.manager.sqlalchemy.model.lane",
    "palace.manager.sqlalchemy.model.measurement",
    "palace.manager.sqlalchemy.model.resource",
    "palace.manager.sqlalchemy.model.saml",
    "palace.manager.sqlalchemy.model.work",
    "palace.manager.sqlalchemy.session",
    "palace.manager.util",
    "palace.manager.util.aes",
    "palace.manager.util.flask_util",
    "palace.manager.util.languages",
    "palace.manager.util.opds_writer",
    "palace.manager.util.permanent_work_id",
    "palace.manager.util.personal_names",
    "palace.manager.util.summary",
    "palace.manager.util.titles",
    "palace.manager.util.web_publication_manifest",
]
no_implicit_reexport = false
strict_equality = false
warn_return_any = false

[[tool.mypy.overrides]]
# Custom mypy overrides for the palace.manager.celery module.
# Since Celery is untyped, and we're using a lot of its
# features, we disable some of the strict mypy checks
# that get annoying when working with Celery.
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
disallow_untyped_defs = true
module = [
    "palace.manager.celery.*",
]
no_implicit_reexport = true
strict_concatenate = true
strict_equality = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
# This override silences errors for modules we import that don't currently
# have type hints, or type stubs that cover them. We should go through this
# list periodically and remove modules that have since added type hints.
ignore_missing_imports = true
module = [
    "aws_xray_sdk.ext.*",
    "celery.*",
    "expiringdict",
    "feedparser",
    "firebase_admin.*",
    "flask_babel",
    "fuzzywuzzy",
    "google.auth",
    "greenlet",
    "html_sanitizer",
    "isbnlib",
    "jsonschema.*",
    "jwcrypto",
    "kombu.*",
    "lxml.*",
    "multipledispatch",
    "nameparser",
    "onelogin.saml2.*",
    # This is ignored because the file is created when building a container
    # so it typically doesn't exist when running mypy, but since it only
    # contains a couple version strings it can be safely ignored
    "palace.manager._version",
    "pyld",
    "textblob.*",
    "unicodecsv",
    "uwsgi",
    "wcag_contrast_ratio",
]

[tool.poetry]
authors = ["The Palace Project <info@thepalaceproject.org>"]
description = "The Palace Project Manager Application"
homepage = "https://thepalaceproject.org"
license = "Apache-2.0"
name = "palace.manager"
packages = [{include = "palace/manager", from = "src"}]
readme = "README.md"
repository = "https://github.com/ThePalaceProject/circulation"
version = "0"  # Version number is managed with tags in git

[tool.poetry.dependencies]
alembic = {extras = ["tz"], version = "^1.8.1"}
annotated-types = "^0.7.0"
aws-xray-sdk = "~2.14"
bcrypt = "^5.0.0"
bidict = "^0.23.1"
boto3 = "^1.28"
celery = {extras = ["redis", "tblib", 'sqs'], version = "^5.3.6"}
certifi = "*"
click = "^8.1.3"
croniter = "^6.0.0"
dependency-injector = "^4.41"
expiringdict = "1.2.2"
feedparser = "6.0.12"
firebase-admin = "^7.0.0"
Flask = "^3.0"
Flask-Babel = "^4.0"
Flask-Cors = "6.0.1"
frozendict = "^2.4.6"
fuzzywuzzy = "0.18.0"  # fuzzywuzzy is for author name manipulations
google-api-python-client = "^2.162.0"
google-auth = "^2.38.0"
html-sanitizer = "^2.1.0"
httpx = {version = "^0.28.1", extras = ["http2"]}
isbnlib = "^3.10.14"
itsdangerous = "^2.1.2"
jsonschema = "^4.22.0"
jwcrypto = "^1.4.2"
levenshtein = "^0.27"
lxml = {extras = ["html-clean"], version = "6.0.0"}
multipledispatch = "^1.0"
nameparser = "^1.1"  # nameparser is for author name manipulations
opensearch-py = "^3.0"
pillow = "^12.0.0"
pycountry = "^24.6.1"
pycryptodome = "^3.18"
pydantic = {version = "^2.12", extras = ["email"]}
pydantic-settings = "^2.5.2"
pydantic-xml = "^2.17.0"
pyinstrument = "^5.0"
PyJWT = "^2.8"
PyLD = "2.0.4"
pymarc = "5.3.1"
pyOpenSSL = "^25.0.0"
pyparsing = "3.2.5"
pyspellchecker = "0.8.3"
python = ">=3.12,<4"
python-dateutil = "2.9.0.post0"
python3-saml = "^1.16"  # python-saml is required for SAML authentication
pytz = "^2025.1"
pyyaml = "^6.0"
redis = "^5.0.5"
redmail = "^0.6.0"
requests = "^2.29"
sqlalchemy = {version = "^1.4", extras = ["mypy"]}
tenacity = "^9.0.0"
textblob = "0.19.0"
types-pyopenssl = "^24.0.0.20240130"
types-pyyaml = "^6.0.12.9"
unicodecsv = "0.14.1"  # this is used, but can probably be removed on py3
uritemplate = "4.2.0"
urllib3 = "^2.5.0"
uWSGI = "~2.0.21"
watchtower = "3.4.0"  # watchtower is for Cloudwatch logging integration
wcag-contrast-ratio = "0.9"
Werkzeug = "^3.0.0"
# xmlsec is a transitive dependency of python3-saml, we set it here so we
# can control its version, since its version is linked to the version of
# lxml we use.
# See: https://github.com/xmlsec/python-xmlsec/issues/356
xmlsec = "^1.3.16"

[tool.poetry.group.ci.dependencies]
dunamai = "^1.16"
pre-commit = "^4.0"
tox = "^4.4"
tox-docker = "^5.0"
tox-gh-actions = "^3.0"

[tool.poetry.group.dev.dependencies]
boto3-stubs = {version = "^1.28", extras = ["boto3", "cloudwatch", "essential", "logs", "s3"]}
freezegun = "~1.5.0"
google-api-python-client-stubs = "^1.29.0"
Jinja2 = "^3.1.2"
mypy = "^1.4.1"
psycopg2-binary = "~2.9.5"
pyfakefs = "^5.3"
pytest = ">=7.2.0"
pytest-alembic = "^0.12.0"
pytest-asyncio = "^1.1.0"
pytest-celery = "^0.0.0"
pytest-cov = "^7.0.0"
pytest-timeout = "*"
pytest-xdist = "^3.5.0"
requests-mock = "1.12.1"
types-aws-xray-sdk = "2.14.0.20250516"
types-croniter = "^6.0.0"
types-Flask-Cors = "^6.0.0"
types-psycopg2 = "^2.9.21"
types-python-dateutil = "^2.8.19"
types-pytz = "^2025.1"
types-redis = "^4.6.0.20240425"
types-requests = "^2.28.11"

[tool.poetry.group.pg]
optional = true

[tool.poetry.group.pg.dependencies]
psycopg2 = "~2.9.5"

[tool.pytest.ini_options]
addopts = [
    "--cov",
    "--cov-report=xml",
    "--dist=worksteal",
    "--numprocesses=auto",
    "--strict-markers",
]
asyncio_mode = "auto"
filterwarnings = [
    "error::pydantic.PydanticDeprecatedSince20",
    "error::pytest.PytestWarning",
    "error::sqlalchemy.exc.SADeprecationWarning",
    "error::sqlalchemy.exc.SAWarning",
]
markers = [
    "minio: mark test as requiring minio",
    "opensearch: mark test as requiring opensearch",
]
timeout = "600"
timeout_method = "thread"

[tool.tomlsort]
ignore_case = true
in_place = true
sort_inline_arrays = true
sort_table_keys = true
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
