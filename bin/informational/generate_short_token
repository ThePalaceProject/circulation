#!/usr/bin/env python3
"""Find information about a particular patron based on barcode and pin."""
import datetime
import os
import sys

bin_dir = os.path.split(__file__)[0]
package_dir = os.path.join(bin_dir, "..", "..")
sys.path.append(os.path.abspath(package_dir))

from api.adobe_vendor_id import AuthdataUtility
from core.model import get_one, Patron
from core.scripts import LibraryInputScript                     # noqa: E402
from core.util.datetime_helpers import utc_now

class ShortTokenScript(LibraryInputScript):
    @classmethod
    def arg_parser(cls, _db):
        parser = super(ShortTokenScript, cls).arg_parser(_db, multiple_libraries=False)
        parser.add_argument(
            '--id',
            help="The patron authorization identifier.",
            required=True,
        )
        parser.add_argument(
            '--days',
            help="How long the token should be good for.",
            required=True,
            type=int,
        )
        return parser

    def do_run(self, _db=None, cmd_args=None, output=sys.stdout):
        _db = _db or self._db
        args = self.parse_command_line(_db, cmd_args=cmd_args)
        patron = get_one(_db, Patron, authorization_identifier=args.id)
        authdata = AuthdataUtility.from_config(args.libraries[0], _db)
        patron_identifier = authdata._adobe_patron_identifier(patron)
        expires = int(authdata.numericdate(utc_now() + datetime.timedelta(days=args.days)))
        token = authdata._encode_short_client_token(
            authdata.short_name, patron_identifier, expires
        )
        username, password = token.rsplit('|', 1)
        print("Vendor ID: {}".format(authdata.vendor_id))
        print("Token: {}".format(token))
        print("Username: {}".format(username))
        print("Password: {}".format(password))


ShortTokenScript().run()
